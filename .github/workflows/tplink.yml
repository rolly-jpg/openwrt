name: Build tplink
on: [push]
jobs:
    build:
        name: Prepare and build tplink
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Update and install feeds
              run: |
                ./scripts/feeds update -a
                ./scripts/feeds install -a
            - name: Generate config for tplink
              run: |
                echo "CONFIG_TARGET_ath79=y\n" > .config
                echo "CONFIG_TARGET_ath79_tiny=y\n" >> .config
                echo "CONFIG_TARGET_MULTI_PROFILE=y\n" >> .config
                echo "CONFIG_TARGET_PER_DEVICE_ROOTFS=y\n" >> .config
                echo "CONFIG_TARGET_DEVICE_ath79_tiny_DEVICE_tplink_tl-wr940n-v6=y\n" >> .config
                echo "CONFIG_ALL_KMODS=y\n" > .config
                echo "CONFIG_ALL_NONSHARED=y\n" > .config
                echo "CONFIG_DEVEL=y\n" > .config
                echo "CONFIG_AUTOREMOVE=y\n" > .config
                echo "CONFIG_BPF_TOOLCHAIN_BUILD_LLVM=y\n" > .config
                echo "# CONFIG_BPF_TOOLCHAIN_NONE is not set\n" > .config
                echo "CONFIG_BUILDBOT=y\n" > .config
                echo "CONFIG_COLLECT_KERNEL_DEBUG=y\n" > .config
                echo "CONFIG_HAS_BPF_TOOLCHAIN=y\n" > .config
                echo "CONFIG_IB=y\n" > .config
                echo "CONFIG_IMAGEOPT=y\n" > .config
                echo "CONFIG_JSON_CYCLONEDX_SBOM=y\n" > .config
                echo "CONFIG_KERNEL_BUILD_DOMAIN="buildhost"\n" > .config
                echo "CONFIG_KERNEL_BUILD_USER="builder"\n" > .config
                echo "CONFIG_KERNEL_DEBUG_INFO=y\n" > .config
                echo "CONFIG_KERNEL_DEBUG_INFO_REDUCED=y\n" > .config
                echo "CONFIG_KERNEL_DEBUG_KERNEL=y\n" > .config
                echo "CONFIG_MAKE_TOOLCHAIN=y\n" > .config
                echo "CONFIG_PACKAGE_cgi-io=y\n" > .config
                echo "CONFIG_PACKAGE_libbpf=m\n" > .config
                echo "CONFIG_PACKAGE_libelf=m\n" > .config
                echo "CONFIG_PACKAGE_liblucihttp=y\n" > .config
                echo "CONFIG_PACKAGE_liblucihttp-ucode=y\n" > .config
                echo "CONFIG_PACKAGE_libpcap=m\n" > .config
                echo "CONFIG_PACKAGE_libxdp=m\n" > .config
                echo "CONFIG_PACKAGE_luci=n\n" > .config
                echo "CONFIG_PACKAGE_luci-app-firewall=n\n" > .config
                echo "CONFIG_PACKAGE_luci-app-opkg=n\n" > .config
                echo "CONFIG_PACKAGE_luci-base=n\n" > .config
                echo "CONFIG_PACKAGE_luci-light=n\n" > .config
                echo "CONFIG_PACKAGE_luci-mod-admin-full=n\n" > .config
                echo "CONFIG_PACKAGE_luci-mod-network=n\n" > .config
                echo "CONFIG_PACKAGE_luci-mod-status=n\n" > .config
                echo "CONFIG_PACKAGE_luci-mod-system=n\n" > .config
                echo "CONFIG_PACKAGE_luci-proto-ipv6=n\n" > .config
                echo "CONFIG_PACKAGE_luci-proto-ppp=n\n" > .config
                echo "CONFIG_PACKAGE_luci-ssl=n\n" > .config
                echo "CONFIG_PACKAGE_luci-theme-bootstrap=n\n" > .config
                echo "CONFIG_PACKAGE_px5g-mbedtls=y\n" > .config
                echo "CONFIG_PACKAGE_qosify=m\n" > .config
                echo "CONFIG_PACKAGE_rpcd=y\n" > .config
                echo "CONFIG_PACKAGE_rpcd-mod-file=y\n" > .config
                echo "CONFIG_PACKAGE_rpcd-mod-iwinfo=y\n" > .config
                echo "CONFIG_PACKAGE_rpcd-mod-luci=n\n" > .config
                echo "CONFIG_PACKAGE_rpcd-mod-rrdns=y\n" > .config
                echo "CONFIG_PACKAGE_rpcd-mod-ucode=y\n" > .config
                echo "CONFIG_PACKAGE_tc-tiny=m\n" > .config
                echo "CONFIG_PACKAGE_ucode-mod-html=y\n" > .config
                echo "CONFIG_PACKAGE_ucode-mod-math=y\n" > .config
                echo "CONFIG_PACKAGE_uhttpd=n\n" > .config
                echo "CONFIG_PACKAGE_uhttpd-mod-ubus=n\n" > .config
                echo "CONFIG_PACKAGE_xdp-filter=m\n" > .config
                echo "CONFIG_PACKAGE_xdp-loader=m\n" > .config
                echo "CONFIG_PACKAGE_xdpdump=m\n" > .config
                echo "CONFIG_PACKAGE_zlib=m\n" > .config
                echo "# CONFIG_PKG_ASLR_PIE_NONE is not set\n" > .config
                echo "CONFIG_PKG_ASLR_PIE_REGULAR=y\n" > .config
                echo "CONFIG_REPRODUCIBLE_DEBUG_INFO=y\n" > .config
                echo "CONFIG_SDK=y\n" > .config
                echo "CONFIG_SDK_LLVM_BPF=y\n" > .config
                echo "CONFIG_TARGET_ALL_PROFILES=n\n" > .config
                echo "CONFIG_USE_LLVM_BUILD=y\n" > .config
                echo "CONFIG_VERSIONOPT=y\n" > .config
                echo "CONFIG_VERSION_BUG_URL=""\n" > .config
                echo "CONFIG_VERSION_CODE=""\n" > .config
                echo "CONFIG_VERSION_CODE_FILENAMES=y\n" > .config
                echo "CONFIG_VERSION_DIST="OpenWrt"\n" > .config
                echo "CONFIG_VERSION_FILENAMES=y\n" > .config
                echo "CONFIG_VERSION_HOME_URL=""\n" > .config
                echo "CONFIG_VERSION_HWREV=""\n" > .config
                echo "CONFIG_VERSION_MANUFACTURER=""\n" > .config
                echo "CONFIG_VERSION_MANUFACTURER_URL=""\n" > .config
                echo "CONFIG_VERSION_NUMBER=""\n" > .config
                echo "CONFIG_VERSION_PRODUCT=""\n" > .config
                echo "CONFIG_VERSION_REPO="https://downloads.openwrt.org/releases/23.05-SNAPSHOT"\n" > .config
                echo "CONFIG_VERSION_SUPPORT_URL=""\n" > .config
                make defconfig
            - name: Download package sources
              run: make download V=s
            - name: Build tools
              run: |
                make tools/install -j$(nproc) V=s || \
                make tools/install V=s
            - name: Build toolchain
              run: |
                make toolchain/install -j$(nproc) V=s || \
                make toolchain/install V=s
            - name: Build target images
              run: |
                make -j$(nproc) V=s || \
                make V=s
            - name: TAR output
              run: tar -cvf tinyx-images.tar bin/targets/ath79/tiny/
            - name: Upload artifacts
              uses: actions/upload-artifact@v3
              with:
                name: tiny-images
                path: tinyx-images.tar
    release:
          name: Make a release
          runs-on: ubuntu-latest
          needs: build
          steps:
            - name: Download the image artifacts
              uses: actions/download-artifact@v3
              with:
                name: tiny-images
            - name: Extract the image artifacts
              run: tar xf tinyx-images.tar
            - name: Get the current date
              run: echo "NOW=$(date +%F)" >> $GITHUB_ENV
            - name: Create a release
              uses: "marvinpinto/action-automatic-releases@latest"
              with:
                repo_token: "${{ secrets.GITHUB_TOKEN }}"
                prerelease: true
                title: "tplink ${{ env.NOW }}"
                automatic_release_tag: "tiny-${{ env.NOW }}"
                auto_generate_release_notes: true
                files: bin/targets/ath79/tiny/*
